#!/bin/bash

container="dotnet-bootstrap-$(mktemp -u XXXXXX)"

# Function to display usage
usage() {
    echo "Description:"
    echo "  This script runs the .NET bootstrap process inside a lxd container."
    echo "  The bootstrap products will be available inside the dist directory in the repo root."
    echo ""
    echo "Usage: $0 --version VERSION --arch ARCH [--apt-proxy URL]"
    echo
    echo "Main options:"
    echo "  --version VERSION               Specify the .NET version to bootstrap per the VMR repo git tag."
    echo "  --arch ARCH                     Specify the bootstrap architecture."
    echo ""
    echo "Other options:"
    echo "  --apt-proxy URL                 Specify an APT proxy URL."
    echo "  -h, --help                      Display this help message."
    exit 1
}

# Custom exit function for cleanup
cleanup() {
    container_exists=$(lxc list -c "n" -f compact | grep -c "$container")
    if [[ $container_exists -eq 1 ]]; then
        lxc stop "$container"
        lxc delete "$container"
    fi
}

# Parse command-line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --version)
            if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                version="$2"
                shift 2
            else
                echo "Error: --version requires a non-empty argument."
                usage
            fi
            ;;
        --arch)
            if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                arch="$2"
                shift 2
            else
                echo "Error: --arch requires a non-empty argument."
                usage
            fi
            ;;
        --apt-proxy)
            if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                proxy="$2"
                shift 2
            else
                echo "Error: --apt-proxy requires a non-empty argument."
                usage
            fi
            ;;
        -h|--help)
            usage
            ;;
        -*)
            echo "Error: Unknown option: $1"
            usage
            ;;
        *)
            break
            ;;
    esac
done

# Check if the required option are provided
if [[ -z "$version" ]]; then
    echo "Error: --version option is required."
    usage
fi
if [[ -z "$arch" ]]; then
    echo "Error: --arch option is required."
    usage
fi

if ! command -v lxd >/dev/null 2>&1; then
    echo "LXD is not installed."
    exit 1
fi

# Set trap to call cleanup function on various signals
trap 'cleanup; exit 0' EXIT         # Runs cleanup on normal exit
trap 'cleanup; exit 1' INT          # Runs cleanup on interrupt (Ctrl+C)
trap 'cleanup; exit 1' TERM         # Runs cleanup on termination signal (kill)

lxc launch ubuntu-daily:j "$container" -c security.privileged=true
lxc config device add "$container" bootstrap-dir disk source="$(pwd)" path=/bootstrap

# Configure APT proxy if specified
if [[ -n "$proxy" ]]; then
    echo "Configuring proxy..."
    lxc exec "$container" -- sh -c "echo \"Acquire::http::Proxy \\\"${proxy}\\\";\" > /etc/apt/apt.conf.d/00proxy"
    lxc exec "$container" -- sh -c "cat /etc/apt/apt.conf.d/00proxy"
    echo "Proxy configured!"
fi


lxc exec "$container" -- sh -c "mkdir -p /bootstrap/dist && chmod 777 /bootstrap/dist"
lxc exec "$container" -- sh -c "cd /bootstrap && python3 -u bootstrap.py --version $version --arch $arch \
    --working-dir /bootstrap/dist | tee /bootstrap/dist/$(date +\"%Y-%m-%d_%H-%M-%S\").log"
